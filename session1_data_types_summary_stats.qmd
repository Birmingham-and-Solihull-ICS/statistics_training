---
title: "Session 1: Data types and summary statistics"
date: "2025-04-04"
author: Chris Mainey
date-format: "D MMMM YYYY"
format: bsol-html
fig-align: 'center'
fig-width: 7
fig-height: 5 
execute:
  echo: false
  cache: false             # Cache results
  warning: false           # Do not include warnings in rendered output
  error: false             # Do not include errors in the output
  feeze: auto              # Re-compute previously generated computational output only in case their source file changes
crossref:
  fig-title: '**Figure**'
  fig-labels: arabic
---

```{r}
#| label: load-libraries
#| warning: false
#| include: false
#| output: false


# Load the required library

library(ggplot2)
library(plotly)
library(tidyverse)
library(scales)
library(DT)
library(BSOLTheme)

theme_set(
  theme_bsol() +
    theme(axis.text = element_text(size = unit(20, "pt")),
          axis.title = element_text(size = unit(20, "pt")),
          text = element_text(size = unit(20, "pt"))
          )
)

```

# Introduction 

## "Data"


::: {.grid}

:::{.g-col-6}

+ We are not interested simply in measurements, or individual datum.

+ We are usually trying to answer a question / learn something / make a decision

+ When use data, we need to bring some order to it

+ We will consider structured data 
:::

:::{.g-col-6}

<a title="Longlivetheux, CC BY-SA 4.0 &lt;https://creativecommons.org/licenses/by-sa/4.0&gt;, via Wikimedia Commons" href="https://commons.wikimedia.org/wiki/File:DIKW_Pyramid.svg"><img width="256" alt="The pyramid of knowledge with a base of data, the next layer built of information, then knowledge and finally wisdom at the peak." src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/06/DIKW_Pyramid.svg/256px-DIKW_Pyramid.svg.png"></a>
:::

:::

__We often say data, but don't away mean data__

## Data types

Data can take various forms:
E.g. measurements, grouping factors, estimates, observations etc.

Different in terms of:

 + Storage
 + Methods for summary/processing
 + Interpretation
 + Data-generating mechanism


A few major groups of data types:

+ Numeric
+ Binary
+ Categorical
  
<br>

::: panel-tabset

#### Numeric

+ <span style="color:DodgerBlue ; font-weight:bold;"> Continuous:</span> values that can be constantly divided with a possible number in between

  + E.g. height of a person could be 172, 173 or 172.5 cm
  
  + <span style="color:SandyBrown; font-size:18px;"> Examples in NHS: </span>  physiological measurements like blood pressure


+ <span style="color:DodgerBlue ; font-weight:bold;"> Discrete:</span> values that can only take whole numbers, usually obtained by counting.

  + E.g. Number of patients seen in a clinic could be 35 or 36 but not 35.5
  
  + <span style="color:SandyBrown; font-size:18px;"> Examples in NHS: </span> counts of patients, waiting time measured in whole minutes, length of stay measured in days, number of patient episodes



#### Binary

+ Exclusive two state variable

  + E.g. 0/1, yes/no, TRUE/FALSE
  
  + <span style="color:SandyBrown; font-size:18px;"> Examples in NHS: </span>  Patient dead or alive?, TRUE or FALSE answer to survey, patient status for a genetic marker


Counting binary events becomes ___discrete numeric___.

May chose to only count the events, e.g. 'deaths' not 'survives'

<br>
<img src = "./assets/img/xkcd.png" class="center">

<span class="center" style="font-size:12px; line-height: 1.2em; font-style: italic;"> <i> Taken from: </i> xkcd https://xkcd.com/605/ </span>



#### Categorical


+ <span style="color:DodgerBlue ; font-weight:bold;"> Nominal:</span> Categories without any notion of order
  + E.g. Hair Colour, Brand of car, Country of residence
  + <span style="color:SandyBrown; font-size:18px;"> Examples in NHS: </span>  Ethnicity, Admission method, Treatment speciality 

<br>

+ <span style="color:DodgerBlue ; font-weight:bold;"> Ordinal:</span> Categories with order, but not linear like numeric 
  + E.g. Survey answers ‘Good, OK & Bad’.  There is order, but ‘OK’ ≠ ‘Bad’ x 2 and ‘Good’ ≠ ‘Bad’ + ‘OK’
  + <span style="color:SandyBrown; font-size:18px;"> Examples in NHS: </span> Cancer stage, self-assessed patient answers like ‘is your health poor, OK or good,’  Age-groups <1, 1-16, 17-40 etc.

::::

# Summarising Data
<br><br>
___“Dear BI team, I would like age of all patients admitted as an emergency to general medicine in December?”___

<br><br>

```{r ages, echo=FALSE, cache=TRUE}
ages <- c(75,81,59,70,64,67,66,54,68,72,80,66,70,76,75,52,59,52,86,56,51,59,72,61,53,72,75,69,64,55,74,54,61,74,86,53,68,69,76,
          58,59,79,59,69,91,55,59,68,58,70,68,60,89,54,85,76,56,56,84,91,90,87,90,85,54,76,91,79,53,62,72,69,75,76,76,76,63,85,
          76,85,67,63,91,63,64,69,63,60,57,83,69,60,58,70,59,85,68,85,56,79,85,76,76,73,60,87,57,67,72,92,58,55,54,71,90,55,58,
          59,63,77,85,77,53,66,73,53,79,70,70,77,56,65,85,64,74,66,74,59,68,79,66,56,68,63,66,66,68,70,64,72,56,83,53,69,67,77,
          68,63,73,57,86,52,75,78,76,61,71,77,64,62,77,69,69,66,85,65,61,72,69,73,53,77,54,56,72,70,69,67,62,78,58,54,69,76,86,
          59,80,84,56,78,75,57,68,91,91)

ages
```



#### How would you answer that question?

What is the question really asking?  It's quite unlikely that sending a list of numbers really answers the question.  They requester may have various different questions, but they probably want some idea of the range of ages, but also how the people are distributed across different ages.

- How might we show this in a better way?

- Summary figures?


<br>

## Visualising data types:

- Scatter plots
- Stem & leaf plot
- Histogram or Kernel Density (sounds more impressive than it is)
- Box plot




### Scatter plots  

::: {.grid}

:::{.g-col-6}
Plots and `x` variable by a `y` variable by point

___Why doesn't this help?___

- We've only got one variable, not two
- No summary information
- We want to see some kind of distribution 


```{r scatter}
plot(ages,  
     cex.main=2, #change font size of title
     cex.sub=2, #change font size of subtitle
     cex.lab=2, #change font size of axis labels
     cex.axis=2)
```
:::

:::

### Stem & Leaf Plots

::: {.grid}

:::{.g-col-6}


- Easy to do by hand or on computer

- Decide on grouping size (5- year in example below)

- Major units on left, minor on right 

- We essentially create a tally

:::

:::{.g-col-6}

```{r stem}
#| message: false
stem(ages, scale = 0.5)

```
:::
:::

### Histograms and Bar Charts

- Plot of binned counts

- Good way to visualise distribution

- Bin sizes can vary & do not have to be equal

- Bar charts are related, but do not share the ‘binning’ idea. Can be used with categorical

::: panel-tabset

#### Equal bins

```{r hist1}
ggplot(as.data.frame(ages), aes(x = ages)) +
  geom_histogram(col = bsol_theme_cols(2), 
                 fill = bsol_theme_cols(2), alpha = 0.6, binwidth = 1) +
  labs(title = 'Histogram of Ages, single-year bins')

```

#### Unequal bins

```{r hist2}
library(gridExtra)
grid.arrange(

  ggplot(as.data.frame(ages), aes(x = ages)) +
  geom_histogram(col = bsol_theme_cols(3), fill = bsol_theme_cols(3)
                 , alpha = 0.5, binwidth = 2) +
  labs(title = 'Histogram of Ages, two-year bins') +
  theme_bsol()
,
ggplot(as.data.frame(ages), aes(x = ages)) +
  geom_histogram(aes(y = ..density..), col = bsol_theme_cols(3)
                 , fill = bsol_theme_cols(3), alpha = 0.5
                 , breaks = c(50, 5,60,65,70,75,80,95)) +
  labs(title = 'Histogram of Ages, variable bins') +
  theme_bsol()
, ncol = 2)

```

:::

### Kernel Density

::: {.grid}

:::{.g-col-6}

```{r kernel}
ggplot(as.data.frame(ages), aes(x = ages)) +
  geom_density( col = bsol_theme_cols(4), 
                fill = bsol_theme_cols(4), alpha = 0.5) +
  labs(title = 'Density of Ages') +
  theme_bsol()

```
:::

:::{.g-col-6}

- Similar to a smoothed histogram

- Plots the probability density of data rather than counts values

- Conceptually harder, but nicer visualisation

:::
:::


### Box Plots

::: grid

:::{.g-col-6}

__Box range is (“hinges”):__

+ 25th percentile
+ 75th percentile
+ Line is the median (50th percentile)
+ Whiskers extend hinge ± 1.5 * IQR
+ Outliers (further points) are represented
+ Terms will be explained in the following slides

:::

:::{.g-col-6}

```{r box}
ggplot(as.data.frame(ages), 
       aes(y = ages, x = "ages", group = "ages")) +
  geom_boxplot(fill = bsol_theme_cols(5)) +
  labs(title = 'Box Plot of Ages') +
  theme_bsol()

```
:::
:::



## Distributions

We commonly want some measure of the Central point, and description of ‘weight’ of data

+ <span style="color:DodgerBlue;"> “Mean” </span> is average of data, calculated centre $\bar{x}$
+ <span style="color:DodgerBlue;"> “Median” </span> is middle value in rank order
+ <span style="color:DodgerBlue;"> “Mode” </span> is the most common value


<br>

### Theoretical ‘Normal’ distribution:###

+ Equally distributed with most common values in the centre.
+ Mean, median and mode are identical
+ Principles apply more widely




### The Normal Distribution
<br><br>
```{r Norm1}
set.seed(3000)

norm.dist <- data.frame(
  value = seq(1, 1000, 1),
  densities = dnorm(seq(1, 1000, 1), 500, 150)
  
)

#plot density from table.  Using GGplot, as I can define a plot object 'p' in this case, and keep adding layers.
p <- 
  ggplot(norm.dist, aes(x=value, y=densities))+
  geom_line(size=1.2)+
  scale_x_continuous(breaks= seq(0, 1000, 100) , minor_breaks = seq(0, 1000, 50)) +
  scale_y_continuous(breaks= seq(0, 0.0035, 0.001) , minor_breaks = seq(0,0.0035, 0.0005), limits = c(0, 0.003))

p

```


### Mean is in the centre of the curve
$$ {\bar{x} = \frac{1}{n} \sum_{i=1}^n x_i   = \frac{sum(x_i)}{count(x_i)} }$$
```{r Norm2}


# add mean line and label
p <- p + geom_vline(aes(xintercept = 500), col = "red", linetype = 2, size = 1.2, alpha = 0.4) +
  annotate("text", x = 500, y = 0.0028, label = "mean", col = "red", alpha = 0.8, size = unit(8, "pt"))

p

```


### Mean + standard deviation
$$ sd = \sqrt{ \frac{\sum_{i=1}^n \left(x_i - \bar{x}^2 \right)}{n-1}}  =   sqrt\left(\frac{sum((x_i-\bar{x})^2)}{n-1}\right)$$
```{r Norm3}

# add 1sd lines
p <- p + geom_vline(aes(xintercept = 350), col = "goldenrod", linetype = 2, size = 1.2, alpha = 0.7) +
  geom_vline(aes(xintercept = 650), col = "goldenrod", linetype = 2, size = 1.2, alpha = 0.7) +
  annotate("text", x = 350, y = 0.0028, label = "mean-sd", col = "goldenrod", alpha = 0.5, size = unit(8, "pt")) +
  annotate("text", x = 650, y = 0.0028, label = "mean+sd", col = "goldenrod", alpha = 0.5, size = unit(8, "pt")) +
  theme()

p

```


### How much of the distribution is here?
<br><br>
  
```{r Norm4}

# add 1sd lines
p <- p + geom_segment(aes(x = 350, xend = 650, y = 0.002, yend = 0.002), size = 1,  
                   arrow = arrow(ends = "both", type = "closed", length = unit(0.25, "cm")), col = "dodgerblue2") +
  annotate("text", x = 500, y = 0.00206, label = "68.27%", col = "dodgerblue2", size = unit(8, "pt"))
p
```



### The Normal Distribution (7)
<br><br>

```{r Norm7}
# add 3 sd lines
p <- p + geom_vline(aes(xintercept = 50), col = "chocolate4", linetype = 2, size = 1.2, alpha = 0.7) +
  geom_vline(aes(xintercept = 950), col = "chocolate4", linetype = 2, size = 1.2, alpha = 0.7) +
  annotate("text", x = 50, y = 0.0028, label = "mean-3*sd", col = "chocolate4", alpha = 0.5, size = unit(8, "pt"))  +
  annotate("text", x = 950, y = 0.0028, label = "mean+3*sd", col = "chocolate4", alpha = 0.5, size = unit(8, "pt"))

# add 3 sd label
p <- p + geom_segment(aes(x = 50, xend = 950, y = 0.0005, yend = 0.0005),
  size = 1,
  arrow = arrow(ends = "both", type = "closed", length = unit(0.25, "cm")), col = "dodgerblue2"
) +
  annotate("text", x = 500, y = 0.00056, label = "99.73%", col = "dodgerblue2", size = unit(8, "pt"))

p
```




### The Normal Distribution (8)
<br><br>
```{r Norm8}

#change to sd scale
p + scale_x_continuous(breaks= c(50,200, 350,500,650,800,950) , minor_breaks = seq(0,1000,50))

```



### The Normal Distribution (9)

<br><br>
```{r Norm9}

#Z-score
p + scale_x_continuous(breaks= c(50,200, 350,500,650,800,950) , minor_breaks = seq(0,1000,50),
                       labels = c(-3, -2, -1, 0, 1, 2, 3))

```





## Z-scores

$$ \large z = \frac{(x - \bar{x})}{sd}$$

+ Standard score, “invariant” to raw scale
+ Changes scale but not distribution
<br><br>
+ Each value is divided the standard-deviation, so:
+ Mean = 0
+ 1 = Mean + 1sd
+ -1= Mean – 1sd



<br><br>
  
  __Z-scores a common way to compare different indicators, on different natural scales__



## Skewed Distributions

```{r skew1}

library(sn)
skew <- data.frame(
  index = seq(10000),
  l = round(as.numeric(rsn(10000, xi = 0, omega = 100, alpha = 200)), 0)
)

# didn't know how to do skewed distribution easily, so fudged it with this.  Using skewed normal distribution then correction for <0,
# by adding the minimum value (made positive) to all.  Then generate right skew version by reversing (max - value)
skew$l <- skew$l + abs(min(skew$l))
skew$r <- max(skew$l) - skew$l

# rearrange data into long "tidy" format for plotting. This uses the 'tidyr' function form the 'tidyverse.'
# Tidyverse is a modern set of R functions for doing most common things like data manipluation, plotting etc. Easier than base R.
# This function will give and index column, a key column that will contain l, or r, and a value.
library(tidyr)
skew_t <- gather(skew, key, value, -index)
skew_t$key <- as.factor(skew_t$key)
levels(skew_t$key) <- c("Left skew", "Right skew")


# ggplot, using 'facet' to split into two plots according to 'key'
s <- ggplot(skew_t, aes(x = value, col = key, fill = key)) +
  geom_histogram(alpha = 0.5) +
  facet_grid(~key)

s

```


## Summarising Skewed Data

```{r skew2}
### Add summary statistics.  R doesn't have a 'mode' function so here's a used defined one:
getmode <- function(x) {
  ux <- unique(x)
  ux[which.max(tabulate(match(x, ux)))]
}


# Add pre-calculated lines for mean, median and mode.
s <- s + geom_vline(aes(xintercept = value, col = "mean"), size = 1, linetype = 2, data = data.frame(key = rbind("Left skew", "Right skew"), value = rbind(l = mean(skew$l), r = mean(skew$r)))) +
  geom_vline(aes(xintercept = value, col = "median"), size = 1, linetype = 2, data = data.frame(key = rbind("Left skew", "Right skew"), value = rbind(l = median(skew$l), r = median(skew$r)))) +
  geom_vline(aes(xintercept = value, col = "mode"), size = 1, linetype = 2, data = data.frame(key = rbind("Left skew", "Right skew"), value = rbind(l = getmode(skew$l), r = getmode(skew$r)))) +
  scale_colour_manual(values = c("mean" = "2", "median" = "3", "mode" = "4"), limits = c("mean", "median", "mode")) +
  guides(fill = FALSE)

s
```


## Summarising Skewed Data (2)

```{r skew3}
qtiles<-
  skew_t %>% 
  filter(key=="Left skew") %>% 
  summarise(p25=quantile(value, probs=0.25),
            median=quantile(value, probs=0.5),
            p75=quantile(value, probs=0.75)) %>% 
  gather()

#ggplot, using 'facet' to split into two plots according to 'key'
s_qtl<-ggplot(skew_t[skew_t$key=="Left skew",], aes(x=value))+
  geom_histogram(alpha=0.5, bins=50,  colour="#F8766D",  fill="#F8766D")+
  geom_vline(aes(xintercept=value, group=key, col=key), data=qtiles, size =1)

s_qtl  
```


## Summarising Skewed Data (3)

- Use median (50th percentile) for mid point

- 25th and 75th percentiles commonly used

- 75th - 25th percentile referred to as ‘Inter-quartile range’ (IQR).

- We can also list extremes of distribution, or 5th and 95th percentiles.

- 'Five-number summary': minimum, "lower-hinge", median, "upper-hinge", maximum
  - 'hinge' is the median of upper of lower half, usually the 25th percentile.

- Mean & SD not a good representation as the mean is affected by the extreme values and the standard deviation assumes symmetrical shape either side of mean.




## How do we calculate a percentile?

::: {.grid}

:::{.g-col-6}

- Take some values: e.g.  the heights in earlier slides

- Order them from low to high

- Add an index

:::

:::{.g-col-6}
<img src = "./assets/img/percentiles.png" height="500" width="300" class="center">
:::
:::

  
  
## How do we calculate a percentile? (2)
  
  
::: {.grid}

:::{.g-col-6}

<p>Find the percentile you want, using the index</p>
<ul><li>e.g. 10% of 205 age values</li>
<li>0.1 * 205 = 20.5th index value</li></ul>


<br>
<p>If index value is a whole number, use it directly</p>
<br>
<p>If index value is between numbers, various rules, including:</p>
<ul><li>Round up/down</li>
<li>Average</li>
<li>Weighted average</li></ul>

  
  ___10th percentile = 55___

::: 
  
:::{.g-col-6}
<img src = "./assets/img/percentiles2.png" height="500" width="400" class="center">
:::
:::


# Summarising Binary or categorical 

We have fewer options here, and some of the methods above are not suitable for these types:

We can use:

+ Counts / frequency in groups
+ Percentage for relative values - lose absolute values

As an example, we will use the ages data set but group it into 10-year categories.

```{r catsplot}
# break points
break_points <- c(50, 60, 70, 80, 90, 100)

# Use the cut function with custom break points
ten_yr_ages <-
  data.frame(
    ages,
    age_band = factor(cut(ages, breaks = break_points, labels = FALSE),
                      levels = seq(5), labels = c("50 - 59", "60-69", "70 - 79"
                                                  ,"80 - 89", "90 - 99"),
                      ordered = TRUE
    )
  )
```

::: {.grid}

:::{.g-col-6}
```{r cat_plot1}
ggplot(ten_yr_ages, aes(x = age_band, fill= age_band)) +
  geom_bar(alpha=0.7, show.legend = FALSE) +
  labs(title = "Numer of admission in age groups",
       x = "Age band") +
  scale_colour_bsol()
```

:::

:::{.g-col-6}

```{r cat_plot2}
ten_yr_ages |> 
  group_by(age_band) |> 
  summarise(perc = n()/205) |> 
  ggplot(aes(x = age_band, y = perc, fill = age_band)) +
  geom_col(alpha = 0.7, show.legend = FALSE) +
  labs(title = "Percentage of admission in age groups",
        x = "Age band") +
  scale_colour_bsol() +
  scale_y_continuous(labels = percent)
  
```

:::

:::

# Summary

+ Is the question asking about the data, or for you to do something with the data to summarise?

+ Consider data type:
  + Numeric / Binary / Categorical
  + Within that, is it discrete / ordered etc.
  
+ Plot it accordingly

+ Chose appropriate summary statistics


```{=html}

<div class="footer-banner">
  <img src="_extensions/Birmingham-and-Solihull-ICS/bsol/Logo/ML_logo.png" alt="ML Logo" class="footer-logo left-logo" />
  <img src="_extensions/Birmingham-and-Solihull-ICS/bsol/Logo/ICB_logo.png" alt="ICB Logo" class="footer-logo right-logo" />
</div>